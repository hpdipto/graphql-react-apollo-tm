{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","launches","map","key","LAUNCH_QUERY","Launch","params","match","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","cache","InMemoryCache","link","createHttpLink","uri","client","ApolloClient","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6cfec1dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.481e9cbb.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nfunction LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\n\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                    })}>{ mission_name }</span></h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LaunchItem;","import React from 'react';\n\nfunction MissionKey() {\n    return (\n        <div>\n            <p>\n                <span className=\"px-3 mr-2 bg-success\"></span> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\"></span> = Fail\n            </p>\n        </div>\n    );\n}\n\nexport default MissionKey;","import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\n\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\n\nfunction Launches() {\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n    return (\n        <div>\n            <h1 className=\"display-4 my-3\">Launches</h1>\n            <MissionKey />\n            {loading && <h4>Loading...</h4>}\n            {error && <h4>Error!</h4>}\n            {data &&\n                data.launches.map(launch => (\n                    <LaunchItem key={launch.flight_number} launch={launch} />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default Launches;","import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nfunction Launch(...params) {\n\n    let { flight_number } = params[0].match.params;\n    flight_number = parseInt(flight_number);\n\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, { variables: { flight_number } });\n\n    // need to update this, its looking good.\n    var mission_name, launch_year, launch_success, rocket, rocket_id, rocket_name, rocket_type;\n\n    if(data) {\n        var { mission_name, launch_year, launch_success, rocket: { rocket_id, rocket_name, rocket_type } } = data.launch;\n    }\n\n    return (\n        <div>\n            {loading && <h4>Loading...</h4>}\n            {error && <h4>Error...</h4>}\n            {data &&\n                <div>\n                    <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission:</span>{mission_name}</h1>\n                    <h4 className=\"mb-3\">Launch Details</h4>\n                    <ul className=\"list-group\">\n                        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                        <li className=\"list-group-item\">Launch Successful: <span className={classNames({\n                            'text-success': launch_success,\n                            'text-danger': !launch_success\n                        })}>{launch_success ? 'Yes' : 'No'}</span></li>\n                    </ul>\n\n                    <h4 className=\"my-3\">Rocket Details</h4>\n                    <ul className=\"list-group\">\n                        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                    </ul>\n                    <hr/>\n                    <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default Launch;","import React from 'react';\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\nimport logo from './logo.png';\n\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst cache = new InMemoryCache();\nconst link = createHttpLink({\n  uri: '/graphql'\n});\n\nconst client = new ApolloClient({\n  cache: cache,\n  link: link\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: 300, display: 'block', margin: 'auto' }} />\n\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}